package numberplace;

public class Field {

	Square board[][] = new Square[9][9];

	Field() {
		for (byte i = 0; i < 9; i++) {
			for (byte j = 0; j < 9; j++) {
				board[i][j] = new Square();
			}
		}
	}

	// display board

	@Override
	public Field clone() {
		Field temp = new Field();
		try {
//			temp = (Square)super.clone();
			for (byte i = 0; i < 9; i++) {
				for (byte j = 0; j < 9; j++) {
					temp.board[i][j] = this.board[i][j].clone();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return temp;
	}

	public void dispBoard() {
		/*
		 * for (Square array[] : board) { for (Square square : array) {
		 * System.out.print(square.number); }
		 */
		for (byte i = 0; i < 9; i++) {
			for (byte j = 0; j < 9; j++) {
				System.out.print(board[i][j].number);
			}
			System.out.print("\n");
		}
		System.out.println("\n");
	}

	public void writeNum(byte num, byte x, byte y) {
		board[x][y].number = num;
	}

	// search horizontal(x is const)
	public void searchHorizontal(byte x, byte y) {
		for (byte i = 0; i < 9; i++) {
			if (board[x][i].number != 0) {// number is written(not 0)
				board[x][y].possibleNum.put(board[x][i].number, false);// if number is written, true -> false
			}
		}
	}

	// search vertical(y is const)
	public void searchVertical(byte x, byte y) {
		for (byte i = 0; i < 9; i++) {
			if (board[i][y].number != 0) {// number is written(not 0)
				board[x][y].possibleNum.put(board[i][y].number, false);// if number is written, true -> false
			}
		}
	}

	// search block(3*3)
	public void searchBlock(byte x, byte y) {
		// (xtop,ytop) is left upper coordinate
		byte xtop = (byte) ((x / (byte) 3) * (byte) 3);
		byte ytop = (byte) ((y / (byte) 3) * (byte) 3);

		for (byte i = 0; i < 3; i++) {
			for (byte j = 0; j < 3; j++) {
				if (board[xtop + i][ytop + j].number != 0) {
					board[x][y].possibleNum.put(board[xtop + i][ytop + j].number, false);
				}
			}
		}
	}

	public void solve() {// if cannot find an effective move(deadlock), return true
		byte i, j;
		boolean flag, zero;// if all square is written number, zero is false
		while (true) {
			zero = true;
			flag = true;
			for (i = 0; i < 9; i++) {
				for (j = 0; j < 9; j++) {
					if (board[i][j].number == 0) {
						zero = false;
						this.searchHorizontal(i, j);
						this.searchVertical(i, j);
						this.searchBlock(i, j);
						if (board[i][j].solveNumber() != 0) {// number is decided
							board[i][j].number = board[i][j].solveNumber();// fixed number is written
							flag = false;// new number is written
							System.out.println("(" + i + "," + j + ")" + " " + board[i][j].number);// show coordinate
																									// written number
							dispBoard();
						}
					}
				}
			}
			if (flag) {// if no number is written, finish loop
				if (zero) {// all square is written number(finish solving)
					System.out.println("finish");
				} else {// some square are blank
					System.out.println("deadlock");
					Field temp = new Field();
					temp = this.clone();// to assume number, copy board
					temp.assume();// not fixed number is written
					temp.solve();// recursion
				}
			}
		}
	}

	public byte[] searchFewest() {// return coordinate whose number possibleNum(true) is fewest
		byte ret[] = new byte[3];// (x,y)
		byte count = 0, min = 10;
		for (byte i = 0; i < 9; i++) {
			for (byte j = 0; j < 9; j++) {
				count = 0;
				if (board[i][j].number == 0) {
					for (byte k = 0; k < 9; k++) {
						if (board[i][j].possibleNum.get(k) == true) {// count possible numbers
							count++;
							num=k;
						}
						if (count < min) {
							min = count;
							ret[0]=num;
							ret[1] = i;
							ret[2] = j;
						}
					}
				}
			}
		}
		return ret;
	}

	public byte[] assume() {// return num,x,y
		byte array[] = new byte[3];
		byte num, x, y;
		this.searchFewest();
		return array;
	}

}